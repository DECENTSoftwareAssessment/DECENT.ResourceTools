package resource.tools;


import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EObjectValidator;

import de.vw.mib.EbnfStandaloneSetup;
import de.vw.mib.ebnf.EbnfPackage;
import de.vw.mib.ebnf.impl.EbnfPackageImpl;
import emf.resource.tools.ResourceTool;

public class EbnfResourceTool extends ResourceTool {
	
	public EbnfResourceTool(){
		super(EbnfResourceTool.class.getName());
		EbnfPackageImpl.init();
		initializeValidator();
		injector = new EbnfStandaloneSetup().createInjectorAndDoEMFRegistration();
	}
	
	@Override
	protected void initializeValidator(){
		super.initializeValidator();
		EObjectValidator validator = new EObjectValidator();
	    EValidator.Registry.INSTANCE.put(EbnfPackage.eINSTANCE, validator);
	}
	
	public void process(String workspace) {
		//the input file should be generated by using 
		//git log --topo-order --pretty=format:"%H %P" --parents  -M -C --cc --decorate=full --all > ~/commit_topology.txt
		String xTextLocation = workspace+"/model.ebnf";
		String outputPath = workspace+"/model.bnf";
		String outputPathValidated = workspace+"/model.bnf";
		String extension = "bnf";

		Resource resource = loadResourceFromXtext(workspace,xTextLocation,true);
		storeResourceContents(resource.getContents(), outputPath, extension);
		Resource fromXMI = loadResourceFromXMI(outputPath, extension);
//	    validateResource(fromXMI);
		storeResourceContents(fromXMI.getContents(), outputPathValidated, extension);

	}
	
	public void initializeDB(String dbName) {
		EPackage[] epackages = new EPackage[] { EbnfPackage.eINSTANCE };
		super.initializeDB(dbName, epackages);
	}
	
	

}
